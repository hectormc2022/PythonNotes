Solución de problemas para la activación de anaconda navigator.

    conda update conda
    conda update anaconda-navigator
    anaconda-navigator --reset
    anaconda-navigator

Data types 
    int     numbers
    float   numbers with a decimal point
    str     Ordered sequence of characters "hello" 'Sammy' "2000"
    list    Ordered sequence of object  [10,"hello",200.3]
    dict    Unordered Key: Value pairs: {"mykey":"value", "name":"Frankie"}
    tup     Ordered immutable sequence of objects: (10,"hello",200.3)
    set     Unordered collection of unique objects: {"a","b"}
    bool    Logical value indicating True or False


Pyghon uses Dynamic Typing 
    my_dogs = 2

    my_dogs = ["Sammy" , "Frankie"]

These actions use [] square brackets and a number index to indicate positions of what you wish to gram.

Character       : h  e  l  l  o
Index           : 0  1  2  3  4
Reverse index   : 0 -4 -3 -2 -1 

Slicing allow you to grab a subsection of multiple characters, a "slice" of the string.
This has following syntax:
    [start:stop:step]

    mystring[abcdefghijk]
    mystring[2:]    - 'cdefghijk'
    mystring[:3]    - 'abc'
    mystring[3:6]   - 'def'
    mystring[::2]   - 'acegik'
    mystring[2:7:2] - 'ceg'
    mystring[::-1]  - 'kjihgfedcba'

Other way to perform this grap string.

    'Hello World'[2]
    'This is a test'[1:6]

------------------------ [ String ] ::

There are multiple way to format string for printing variables in them. This is known as string interpolation.

***It's important to note that strings have an important property known as immutability. This means that once a string is created, the elements within it can not be changed or replaced.

print('Ths is a string {}'.format('INSERTED')
	- This is a string INSERTED

print('The {} {} {}'.format('fox','brown','quick'))
	- The fox brwon quick

print('The {2} {1} {0}'.format('fox','brown','quick'))
	- The quick brown fox

print('The {0} {0} {0}').format('fox','brown','quick'))
	- The fox fox fox

print('The {q} {b} {f}'.format(f='fox',b='brown',q='quick'))

Float formatting follows "{value:width.precision f}"

	- result = 100/777
	- 0.1287001287001287
	- print("The result was {r:1.2f}".format(r=result))
	- The result was 0.13

We can simplify the expresion format like this

name = "Jose"
print(f"Hello, this name is {name}")
	- Hello, this name is Jose


s = "Hello World"
s = s + ' concatenate me!'
    Hello World concatenate me!

We can use the multiplication symbol to create repetition!

letter = 'z'
letter*10
    'zzzzzzzzzz'


Basic Built-in String methods
Objects in Python usually have built-in methods. These methods are functions inside the object (we will learn about these in much more depth later) that can perform actions or commands on the object itself.

We call methods with a period and then the method name. Methods are in the form:
    object.method(parameters)
Where parameters are extra arguments we can pass into the method.

s = 'Hello World concatenate me!'

# Upper Case a string
    s.upper()

# Lower case
    s.lower()

# Split a string by blank space (this is the default)
    s.split()
    ['Hello', 'World', 'concatenate', 'me!']

# Split by a specific element (doesn't include the element that was split on)
    s.split('W')
    ['Hello ', 'orld concatenate me!']


Padding and Precision of Floating Point Numbers
Floating point numbers use the format %5.2f. Here, 5 would be the minimum number of characters the string should contain; these may be padded with whitespace if the entire number does not have this many digits. Next to this, .2f stands for how many numbers to show past the decimal point.

print('Floating point numbers: %5.2f' %(13.144))
    Floating point numbers: 13.14

print('Floating point numbers: %1.5f' %(13.144))
    Floating point numbers: 13.14400

print('Floating point numbers: %25.2f' %(13.144))
    Floating point numbers: 13.14


Formatting with the .format() method
A better way to format objects into your strings for print statements is with the string .format() method. The syntax is:

print('The {2} {1} {0}'.format('fox','brown','quick'))
    The quick brown fox

print('First Object: {a}, Second Object: {b}, Third Object: {c}'.format(a=1,b='Two',c=12.3))
    First Object: 1, Second Object: Two, Third Object: 12.3


Alignment, padding and precision with .format()
Within the curly braces you can assign field lengths, left/right alignments, rounding parameters and more

print('{0:8} | {1:9}'.format('Fruit', 'Quantity'))
print('{0:8} | {1:9}'.format('Apples', 3.))
print('{0:8} | {1:9}'.format('Oranges', 10))

    Fruit    | Quantity 
    Apples   |       3.0
    Oranges  |        10

print('{0:<8} | {1:^8} | {2:>8}'.format('Left','Center','Right'))
print('{0:<8} | {1:^8} | {2:>8}'.format(11,22,33))

    Left     |  Center  |    Right
    11       |    22    |       33


print('{0:=<8} | {1:-^8} | {2:.>8}'.format('Left','Center','Right'))
print('{0:=<8} | {1:-^8} | {2:.>8}'.format(11,22,33))

    Left==== | -Center- | ...Right
    11====== | ---22--- | ......33



Float formatting follows "result: {value:{width}.{precision}}"

num = 23.45678
print("My 10 character, four decimal number is:{0:10.4f}".format(num))
print(f"My 10 character, four decimal number is:{num:{10}.{6}}")

    My 10 character, four decimal number is:   23.4568
    My 10 character, four decimal number is:   23.4568
----------------------------------------------------------------------------------------------

Dictionaries: Objects retrieved by key name.
	Unordered and can not be sorted.

List: Object retrieved by location.
	Ordered Sequence can be indexed or sliced.


# Make a dictionary with {} and : to signify a key and a value
my_dict = {'key1':'value1','key2':'value2'}


my_dict = {'key1':123,'key2':[12,23,33],'key3':['item0','item1','item2']}

# Call values by their key
my_dict['key2']

Its important to note that dictionaries are very flexible in the data types they can hold. For example:

my_dict = {'key1':123,'key2':[12,23,33],'key3':['item0','item1','item2']}

# Can then even call methods on that value
my_dict['key3'][0].upper()

# Set the object equal to itself minus 123 
my_dict['key1'] -= 123
my_dict['key1']

---------------------------------------------------------------------------------------

Tuples
In Python tuples are very similar to lists, however, unlike lists they are immutable meaning they can not be changed. You would use tuples to present things that shouldn't be changed, such as days of the week, or dates on a calendar.


#Create a tuple
t = (1,2,3)

# Can also mix object types
t = ('one',2)

Immutability
It can't be stressed enough that tuples are immutable.


-----------------------------------------------------------------------------------------

Set and Booleans
There are two other object types in Python that we should quickly cover: Sets and Booleans.

Sets
Sets are an unordered collection of unique elements. We can construct them by using the set() function. Let's go ahead and make a set to see how it works.

x = set()


# We add to sets with the add() method
x.add(1)

# Add a different element
x.add(2)


# Create a list with repeats
list1 = [1,1,2,2,3,4,5,6,1,1]


# Cast as set to get unique values
set(list1)
{1, 2, 3, 4, 5, 6}


## --------------------- IF -----------------------
Indentation
It is important to keep a good understanding of how indentation works in Python to maintain the structure and order of your code. We will touch on this topic again when we start building out functions!

If statement

    if some_condition:
        # execute some code
    elif some_other_condition: 
        # do something different
    else:
        # do something else       
## -----------------------

x = False
if x:
    print('x was True!')
else:
    print('I will be printed in any case where x is not true')

## ----- Multiple Branches

loc = 'Bank'

if loc == 'Auto Shop':
    print('Welcome to the Auto Shop!')
elif loc == 'Bank':
    print('Welcome to the bank!')
else:
    print('Where are you?')

###

person = 'Sammy'

if person == 'Sammy':
    print('Welcome Sammy!')
else:
    print("Welcome, what's your name?")


## ------ For

my_iterable = [1,2,3]
for item_name in my_iterable:
    print(item_name)


for num in list1:
    print(num)


for num in list1:
    if num % 2 == 0:
        print(num)


for letter in 'This':
    print(letter)

T
h
i
s

## ------------- for with tuples

list2 = [(2,4),(6,8),(10,12)]

for tup in list2:
    print(tup)

(2, 4)
(6, 8)
(10, 12)

# Now with unpacking!
for (t1,t2) in list2:
    print(t1)

2
6
10

for (t1,t2) in list2:
    print(t1)
    ptint(t2)

2
4
6
8

## ------------- for with dictionaries

d = {'k1':1,'k2':2,'k3':3}

for item in d:
    print(item)

k1
k2
k3

dict_items([('k1', 1), ('k2', 2), ('k3', 3)])

for k,v in d.items():
    print(k) 
    print(v)

k1
1
k2
2
k3
3

list(d.keys())
    ['k1', 'k2', 'k3']
list(d.values())
    [1, 2, 3]


## ------ While loops


while test:
    code statements
else:
    final code statements



x = 0
while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1

## break, continue, pass

We can use break, continue, and pass statements in our loops to add additional functionality for various cases. The three statements are defined by:

break: Breaks out of the current closest enclosing loop.
continue: Goes to the top of the closest enclosing loop.
pass: Does nothing at all.

Thinking about break and continue statements, the general format of the while loop looks like this:

while test: 
    code statement
    if test: 
        break
    if test: 
        continue 
else:

## ---- continue
x = 0
while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1
    if x==3:
        print('x==3')
    else:
        print('continuing...')
        continue


mystring = 'Sammy'
for letter in mystring
    if letter == 'a':
        continue
    print(letter)

S
m
m
y


## ---- break
x = 0
while x < 10:
    print('x is currently: ',x)
    print(' x is still less than 10, adding 1 to x')
    x+=1
    if x==3:
        print('Breaking because x==3')
        break
    else:
        print('continuing...')
        continue


##---------------------------
